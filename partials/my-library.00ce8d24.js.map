{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,uCAKMC,EAA2BC,SAASC,cAAc,kBAClDC,EAAmBC,KAAKC,MAAMC,aAAaC,QAAQ,YAEnDC,EAAW,sCACXC,EAAU,mCACZC,EAAS,G,SAEEC,I,OAAAA,EAAfC,EAAAd,EAAA,CAAAc,EAAAC,GAAAC,MAAA,SAAAC,I,IACQC,EAAAC,EAAAC,EAAAC,EAAAC,EAAMC,EACAC,EAEFC,EACEC,EAGFC,E,kEAPJT,GAAY,EAAZC,GAAY,EAAZC,OAAYQ,E,SAAZP,EAAgBhB,EAAgBwB,OAAAC,Y,UAAhCZ,GAAAI,EAAAD,EAAYU,QAAAC,KAAA,C,uBAANT,EAAND,EAAYW,M,SACcC,EAAgBX,G,OAApCC,EAAWW,EAAAC,KAEbX,EAAUY,OAAOC,SAASd,EAAYe,cAAgBf,EAAYgB,gBAChEd,EAAa,kCAA0De,OAAxBjB,EAAYkB,aAC7C,2GAEhBf,EAAc,GAClBgB,EAAAC,OAAOC,SAAQ,SAAAC,GACTtB,EAAYoB,OAAOG,SAASD,EAAME,KACpCrB,EAAYsB,KAAKH,EAAMI,K,IAI3BtC,GAAU,qDAKY6B,OAJLjB,EAAYwB,GAAG,2KAKXP,OADCjB,EAAYkB,YAAchB,EAd5B,2GAcoD,kCAKjCe,OAJlBjB,EAAY2B,MAAM,uKAMIV,OAFJjB,EAAY2B,MAAM,uFAEcV,OAA5Bd,EAAYyB,KAAK,MAAM,OACjBX,OADsBhB,EAAQ,qEACMgB,OAApCjB,EAAY6B,aAAaC,QAAQ,GAAG,gHAK7EC,QAAQC,IAAI5C,GACZ2C,QAAQC,IAAIhC,GACdtB,EAAyBuD,mBAAmB,YAAY7C,G,QAlC9DM,GAAY,E,yEAAZC,GAAY,EAAZC,EAAYe,EAAAuB,G,4BAAZxC,GAAY,MAAZG,EAAYsC,QAAZtC,EAAYsC,S,sBAAZxC,EAAY,C,sBAAZC,E,qIADkBwC,MAAAC,KAAAC,U,UA2CX5B,EAAgB6B,G,OAAhBC,EAAeJ,MAAAC,KAAAC,U,UAAfE,I,OAAAA,EAAflD,EAAAd,EAAA,CAAAc,EAAAC,GAAAC,MAAA,SAAAC,EAA+B8C,G,IAEpBE,E,2FAAcC,EAAAC,QAAMC,IAAI,GAAc3B,OAAX/B,GAA2B+B,OAAhBsB,EAAK,aAAmBtB,OAAR9B,EAAQ,oB,cAA/DsD,EAAK9B,EAAAC,KAAJ6B,K,kBACEA,G,gCAEPV,QAAQC,IAAGrB,EAAAuB,I,0DALaE,MAAAC,KAAAC,U,aA3CfjD,EAAW+C,MAAAC,KAAAC,U,CAwC1BO,E","sources":["src/js/my-library.js"],"sourcesContent":["import axios from \"axios\";\nimport { genres } from './genres';\n\n// import { showPreloader, hidePreloader } from './loader';\n// https://api.themoviedb.org/3/movie/{movie_id}?api_key=<<api_key>>&language=en-US\nconst containerListWatchedCard = document.querySelector('.film-list-lib')\nconst dataWatchedCards = JSON.parse(localStorage.getItem('wathced'))\n\nconst BASE_URL = 'https://api.themoviedb.org/3/movie/';\nconst API_KEY = '352708f90836dd2b75b209ae082e91df'\nlet markup = '';\n\nasync function onCardWatch(){\n    for(const idFilm of dataWatchedCards){\n        const oneFilmCard = await getWatchedFilms(idFilm)\n\n        let release = Number.parseInt(oneFilmCard.release_date || oneFilmCard.first_air_date);\n        const mainPoster = `https://image.tmdb.org/t/p/w300${oneFilmCard.poster_path}`;\n        const posterFake = `https://shop-cdn1.vigbo.tech/shops/48947/products/18863233/images/2-be392e7cfe9a0fa843b29c1e22be8909.jpg`;\n  \n        let genreMarkup = [];\n        genres.forEach(genre => {\n          if (oneFilmCard.genres.includes(genre.id)) {\n            genreMarkup.push(genre.name);\n          }\n        });\n  \n        markup += ` <li class =\"film-item\">\n                <a id='${oneFilmCard.id}' class=\"film-card\" href=\"#\">\n                  <div class='thumb'>\n                  <img\n                      class = 'poster'\n                      src= \"${oneFilmCard.poster_path ? mainPoster : posterFake}\"\n                      alt=\"${oneFilmCard.title}\"\n                      loading=\"lazy\"\n                    /></div>\n                    <div class='film-data'>\n                      <h2 class=\"title-film\">${oneFilmCard.title}</h2>\n                      <p>\n                         <span class='info-film'>${genreMarkup.join(', ')} | ${release}</span> \n                        <span class =\"rating\">IMDB:<br>${oneFilmCard.vote_average.toFixed(1)}</span>\n                      </p>\n                    </div>\n                  </a>\n              </li>`;\n                console.log(markup)\n                console.log(oneFilmCard)\n              containerListWatchedCard.insertAdjacentHTML('beforeend',markup)\n    }\n    \n    \n}\nonCardWatch()\n\n\nasync function getWatchedFilms(page) {\n    try {\n    const {data} = await axios.get(`${BASE_URL}${page}?api_key=${API_KEY}&language=en-US`)\n      return data;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n// async function getWatchedFilms(idFilm) {\n//     try {\n      \n//         console.log(data)\n     \n//   containerListWatchedCard.insertAdjacentHTML('beforeend',markup)\n\n//         // console.log(markup)\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   }\n"],"names":["$bpxeT","parcelRequire","$bb2af86579234925$var$containerListWatchedCard","document","querySelector","$bb2af86579234925$var$dataWatchedCards","JSON","parse","localStorage","getItem","$bb2af86579234925$var$BASE_URL","$bb2af86579234925$var$API_KEY","$bb2af86579234925$var$markup","$bb2af86579234925$var$_onCardWatch","$parcel$interopDefault","$2TvXO","mark","_callee","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","idFilm","oneFilmCard","release","mainPoster","genreMarkup","undefined","Symbol","iterator","next","done","value","$bb2af86579234925$var$getWatchedFilms","_ctx","sent","Number","parseInt","release_date","first_air_date","concat","poster_path","$twtVq","genres","forEach","genre","includes","id","push","name","title","join","vote_average","toFixed","console","log","insertAdjacentHTML","t0","return","apply","this","arguments","page","$bb2af86579234925$var$_getWatchedFilms","data","$dIxxU","default","get","$bb2af86579234925$var$onCardWatch"],"version":3,"file":"my-library.00ce8d24.js.map"}