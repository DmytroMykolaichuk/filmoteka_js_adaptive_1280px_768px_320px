{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,0BCEMC,EAAUC,SAASC,cAAc,cACjCC,EAAYF,SAASC,cAAc,oBACnCE,EAAcH,SAASC,cAAc,kBACrCG,EAAeJ,SAASC,cAAc,kBAE5CF,EAASM,iBAAiB,SACnB,WACL,GAAGN,EAASO,UAAUC,SAAS,WAAY,OAC3CH,EAAaI,UAAU,GACvBT,EAASO,UAAUG,OAAO,WAC1BP,EAAWI,UAAUG,OAAO,U,IAE9BP,EAAWG,iBAAiB,SACrB,WACL,GAAGH,EAAWI,UAAUC,SAAS,WAAY,OAC7CH,EAAaI,UAAU,GACvBT,EAASO,UAAUG,OAAO,WAC1BP,EAAWI,UAAUG,OAAO,WAC5BC,G,IAGFP,EAAYE,iBAAiB,SACtB,WACL,GAAGH,EAAWI,UAAUC,SAAS,WAGjC,OAFEI,aAAaC,WAAW,gBACxBR,EAAaI,UAAU,IAEzBG,aAAaC,WAAW,Q,sDDjB1B,IAAMC,EAA2Bb,SAASC,cAAc,cAClDa,EAAmBC,KAAKC,MAAML,aAAaM,QAAQ,YAEnDC,GADiBH,KAAKC,MAAML,aAAaM,QAAQ,UACtC,uCACXE,EAAU,mCAEVC,EAAcpB,SAASqB,eAAe,S,SAItBX,I,OAAAY,EAAWC,MAAAC,KAAAC,U,UAAXH,I,OAAAA,EAAfI,EAAA7B,EAAA,CAAA6B,EAAAC,GAAAC,MAAA,SAAAC,I,IAEAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAMC,EACHC,EAEFC,EACEC,EAEFC,EAQAC,E,kEAfN3B,EAAyBL,UAAY,GAChCsB,GAAY,EAAZC,GAAY,EAAZC,OAAYS,E,SAAZR,EAAgBnB,EAAgB4B,OAAAC,Y,UAAhCb,GAAAI,EAAAD,EAAYW,QAAAC,KAAA,C,uBAANV,EAAND,EAAYY,M,SACWC,EAAgBZ,G,OAApCC,EAAWY,EAAAC,KAEbZ,EAAUa,OAAOC,SAASf,EAAYgB,cAAgBhB,EAAYiB,gBAChEf,EAAa,kCAA0DgB,OAAxBlB,EAAYmB,aAC7C,2GAChBhB,EAAc,GAElBiB,EAAAC,OAAOC,SAAQ,SAAAC,GACTvB,EAAYqB,OAAOG,SAASD,EAAME,KACpCtB,EAAYuB,KAAKH,EAAMI,K,IAIvBvB,EAAS,GACbA,GAAU,qDAMUc,OALClB,EAAYyB,GAAG,2KAOXP,OAFLlB,EAAYmB,YAAcjB,EAhB1B,2GAiBD,kCAKwBgB,OAJlBlB,EAAY4B,MAAM,uKAMIV,OAFJlB,EAAY4B,MAAM,uFAIjCV,OAFmBf,EAAY0B,KACpC,MACA,OAC8BX,OADzBjB,EAAQ,oEAGdiB,OAF+BlB,EAAY8B,aAAaC,QACxD,GACA,gHAKtBtD,EAAyBuD,mBAAmB,YAAa5B,G,QAvCtDV,GAAY,E,yEAAZC,GAAY,EAAZC,EAAYgB,EAAAqB,G,4BAAZvC,GAAY,MAAZG,EAAYqC,QAAZrC,EAAYqC,S,sBAAZvC,EAAY,C,sBAAZC,E,qIAF0BT,MAAAC,KAAAC,U,UA+FlBsB,EAAgBwB,G,OAAhBC,EAAejD,MAAAC,KAAAC,U,UAAf+C,I,OAAAA,EAAf9C,EAAA7B,EAAA,CAAA6B,EAAAC,GAAAC,MAAA,SAAAC,EAA+B0C,G,IAEnBE,E,2FAAeC,EAAAC,QAAMC,IAC3B,GAActB,OAAXpC,GAA2BoC,OAAhBiB,EAAK,aAAmBjB,OAARnC,EAAQ,oB,cADlCsD,EAAMzB,EAAAC,KAAJwB,K,kBAGDA,G,gCAEPI,QAAQC,IAAG9B,EAAAqB,I,0DAPe9C,MAAAC,KAAAC,U,CAlG9BL,EAAYf,iBAAiB,SAAS,WAAM,IA+C5CK,IAEAU,EAAYf,iBAAiB,SAAS,W,IAgDtC0E,a","sources":["src/js/my-library.js","src/js/buttons-my-library.js"],"sourcesContent":["import axios from 'axios';\nimport {\n  onClickWatchedBtn,\n  onClickQueueBtn,\n  onClickClearAll,\n} from './buttons-my-library';\nimport { genres } from './genres';\nimport { clickOnFilmCard } from './film-modal';\nimport { getVideoInfo } from './trailer';\nimport { showPreloader, hidePreloader } from './loader';\n// import { showPreloader, hidePreloader } from './loader';\n// https://api.themoviedb.org/3/movie/{movie_id}?api_key=<<api_key>>&language=en-US\nconst containerListWatchedCard = document.querySelector('.film-list');\nconst dataWatchedCards = JSON.parse(localStorage.getItem('wathced'));\nconst dataQueueCards = JSON.parse(localStorage.getItem('queue'));\nconst BASE_URL = 'https://api.themoviedb.org/3/movie/';\nconst API_KEY = '352708f90836dd2b75b209ae082e91df';\n\nconst queueButton = document.getElementById('queue');\nqueueButton.addEventListener('click', () => {});\n\n\nexport async function onCardWatch() {\n  containerListWatchedCard.innerHTML = '';\n  for (const idFilm of dataWatchedCards) {\n    const oneFilmCard = await getWatchedFilms(idFilm);\n\n    let release = Number.parseInt(oneFilmCard.release_date || oneFilmCard.first_air_date);\n    const mainPoster = `https://image.tmdb.org/t/p/w300${oneFilmCard.poster_path}`;\n    const posterFake = `https://shop-cdn1.vigbo.tech/shops/48947/products/18863233/images/2-be392e7cfe9a0fa843b29c1e22be8909.jpg`;\n    let genreMarkup = [];\n\n    genres.forEach(genre => {\n      if (oneFilmCard.genres.includes(genre.id)) {\n        genreMarkup.push(genre.name);\n      }\n    });\n\n    let markup = '';\n    markup += ` <li class =\"film-item\">\n                <a id='${oneFilmCard.id}' class=\"film-card\" href=\"#\">\n                  <div class='thumb'>\n                  <img\n                      class = 'poster'\n                      src= \"${\n                        oneFilmCard.poster_path ? mainPoster : posterFake\n                      }\"\n                      alt=\"${oneFilmCard.title}\"\n                      loading=\"lazy\"\n                    /></div>\n                    <div class='film-data'>\n                      <h2 class=\"title-film\">${oneFilmCard.title}</h2>\n                      <p>\n                         <span class='info-film'>${genreMarkup.join(\n                           ', '\n                         )} | ${release}</span>\n                        <span class =\"rating\">IMDB:<br>${oneFilmCard.vote_average.toFixed(\n                          1\n                        )}</span>\n                      </p>\n                    </div>\n                  </a>\n              </li>`;\n    containerListWatchedCard.insertAdjacentHTML('beforeend', markup);\n  }\n}\nonCardWatch();\n//////////addEventListener//////\nqueueButton.addEventListener('click', () => {\n  async function onCardQueue() {\n    containerListWatchedCard.innerHTML = '';\n    for (const idFilm of dataQueueCards) {\n      const oneFilmCard = await getWatchedFilms(idFilm);\n      let release = Number.parseInt(\n        oneFilmCard.release_date || oneFilmCard.first_air_date\n      );\n      const mainPoster = `https://image.tmdb.org/t/p/w300${oneFilmCard.poster_path}`;\n      const posterFake = `https://shop-cdn1.vigbo.tech/shops/48947/products/18863233/images/2-be392e7cfe9a0fa843b29c1e22be8909.jpg`;\n      let genreMarkup = [];\n      genres.forEach(genre => {\n        if (oneFilmCard.genres.includes(genre.id)) {\n          genreMarkup.push(genre.name);\n        }\n      });\n      let markup = '';\n      markup += ` <li class =\"film-item\">\n                <a id='${oneFilmCard.id}' class=\"film-card\" href=\"#\">\n                  <div class='thumb'>\n                  <img\n                      class = 'poster'\n                      src= \"${\n                        oneFilmCard.poster_path ? mainPoster : posterFake\n                      }\"\n                      alt=\"${oneFilmCard.title}\"\n                      loading=\"lazy\"\n                    /></div>\n                    <div class='film-data'>\n                      <h2 class=\"title-film\">${oneFilmCard.title}</h2>\n                      <p>\n                         <span class='info-film'>${genreMarkup.join(\n                           ', '\n                         )} | ${release}</span>\n                        <span class =\"rating\">IMDB:<br>${oneFilmCard.vote_average.toFixed(\n                          1\n                        )}</span>\n                      </p>\n                    </div>\n                  </a>\n              </li>`;\n      console.log(markup);\n      console.log(oneFilmCard);\n      containerListWatchedCard.insertAdjacentHTML('beforeend', markup);\n    }\n  }\n});\n\nonCardQueue();\nasync function getWatchedFilms(page) {\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL}${page}?api_key=${API_KEY}&language=en-US`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n","import { onCardWatch } from \"./my-library\"\n\nconst queueBtn= document.querySelector('.secondary')\nconst watchedBtn= document.querySelector('.lib-btn.current')\nconst btnClearAll = document.querySelector('.btn-clear-all')\nconst mylibWrapper = document.querySelector('.mylib-wrapper')\n\nqueueBtn.addEventListener('click', onClickQueueBtn)\nexport function onClickQueueBtn(){\n  if(queueBtn.classList.contains('current')){return}\n  mylibWrapper.innerHTML=''\n  queueBtn.classList.toggle('current')\n  watchedBtn.classList.toggle('current')\n}\nwatchedBtn.addEventListener('click', onClickWatchedBtn)\nexport function onClickWatchedBtn(){\n  if(watchedBtn.classList.contains('current')){return}\n  mylibWrapper.innerHTML=''\n  queueBtn.classList.toggle('current')\n  watchedBtn.classList.toggle('current')\n  onCardWatch()\n}\n\nbtnClearAll.addEventListener('click', onClickClearAll)\nexport function onClickClearAll(){\n  if(watchedBtn.classList.contains('current')){\n    localStorage.removeItem('wathced')\n    mylibWrapper.innerHTML=''\n  return}\n  localStorage.removeItem('queue')\n}"],"names":["$bpxeT","parcelRequire","$7d854cd8b40ceb9e$var$queueBtn","document","querySelector","$7d854cd8b40ceb9e$var$watchedBtn","$7d854cd8b40ceb9e$var$btnClearAll","$7d854cd8b40ceb9e$var$mylibWrapper","addEventListener","classList","contains","innerHTML","toggle","$bb2af86579234925$export$b99bead8ac476cc4","localStorage","removeItem","$bb2af86579234925$var$containerListWatchedCard","$bb2af86579234925$var$dataWatchedCards","JSON","parse","getItem","$bb2af86579234925$var$BASE_URL","$bb2af86579234925$var$API_KEY","$bb2af86579234925$var$queueButton","getElementById","$bb2af86579234925$var$_onCardWatch","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","idFilm","oneFilmCard","release","mainPoster","genreMarkup","markup","undefined","Symbol","iterator","next","done","value","$bb2af86579234925$var$getWatchedFilms","_ctx","sent","Number","parseInt","release_date","first_air_date","concat","poster_path","$twtVq","genres","forEach","genre","includes","id","push","name","title","join","vote_average","toFixed","insertAdjacentHTML","t0","return","page","$bb2af86579234925$var$_getWatchedFilms","data","$dIxxU","default","get","console","log","onCardQueue"],"version":3,"file":"my-library.82f75ff0.js.map"}