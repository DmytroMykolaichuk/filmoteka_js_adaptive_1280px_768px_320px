{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SCAA,MAAMC,EAAUC,SAASC,cAAc,cACjCC,EAAYF,SAASC,cAAc,oBACnCE,EAAcH,SAASC,cAAc,kBAE3CF,EAASK,iBAAiB,SACnB,WACL,GAAGL,EAASM,UAAUC,SAAS,WAAY,OAC3CP,EAASM,UAAUE,OAAO,WAC1BL,EAAWG,UAAUE,OAAO,U,IAE9BL,EAAWE,iBAAiB,SACrB,WACL,GAAGF,EAAWG,UAAUC,SAAS,WAAY,OAC7CP,EAASM,UAAUE,OAAO,WAC1BL,EAAWG,UAAUE,OAAO,U,IAG9BJ,EAAYC,iBAAiB,SACtB,WACL,GAAGF,EAAWG,UAAUC,SAAS,WAEjC,YADEE,aAAaC,WAAW,WAE1BD,aAAaC,WAAW,Q,sDDd1B,MAAMC,EAA2BV,SAASC,cAAc,cAClDU,EAAmBC,KAAKC,MAAML,aAAaM,QAAQ,YA+DzDC,eAAeC,EAAgBC,GAC7B,IACE,MAAMC,KAAEA,SAAerB,EAAAsB,QAAMC,IAC3B,sCAAcH,6DAEhB,OAAOC,C,CACP,MAAOG,GACPC,QAAQC,IAAIF,E,GA1DhBN,iBACEL,EAAyBc,UAAY,GACrC,IAAK,MAAMC,KAAUd,EAAkB,CAMrC,MAAMe,QAAoBV,EAAgBS,GAC1C,IAAIE,EAAUC,OAAOC,SACnBH,EAAYI,cAAgBJ,EAAYK,gBAE1C,MAAMC,EAAa,kCAAkCN,EAAYO,cAC3DC,EAAa,2GACnB,IAAIC,EAAc,GAClBC,EAAAC,OAAOC,SAAQC,IACTb,EAAYW,OAAOG,SAASD,EAAME,KACpCN,EAAYO,KAAKH,EAAMI,KAAK,IAGhC,IAAIC,EAAS,GACbA,GAAU,oDACWlB,EAAYe,uKAKbf,EAAYO,YAAcD,EAAaE,kCAElCR,EAAYmB,yKAIMnB,EAAYmB,2FAERV,EAAYW,KACpC,WACKnB,oEACyBD,EAAYqB,aAAaC,QACxD,iHAMtB1B,QAAQC,IAAIqB,GACZtB,QAAQC,IAAIG,GACZhB,EAAyBuC,mBAAmB,YAAaL,E,EAG7DM","sources":["src/js/my-library.js","src/js/buttons-my-library.js"],"sourcesContent":["import axios from 'axios';\nimport { onClickWatchedBtn, onClickQueueBtn, onClickClearAll } from \"./buttons-my-library\";\nimport { genres } from './genres';\nimport { clickOnFilmCard } from './film-modal';\nimport { getVideoInfo } from './trailer';\nimport { showPreloader, hidePreloader } from './loader';\n// import { showPreloader, hidePreloader } from './loader';\n// https://api.themoviedb.org/3/movie/{movie_id}?api_key=<<api_key>>&language=en-US\nconst containerListWatchedCard = document.querySelector('.film-list');\nconst dataWatchedCards = JSON.parse(localStorage.getItem('wathced'));\nconst BASE_URL = 'https://api.themoviedb.org/3/movie/';\nconst API_KEY = '352708f90836dd2b75b209ae082e91df';\n// const displayedFilms = [];\n\n// function isFilmDisplayed(id) {\n//   return displayedFilms.includes(id);\n// }\n\n// function addDisplayedFilm(id) {\n//   displayedFilms.push(id);\n// }\nasync function onCardWatch() {\n  containerListWatchedCard.innerHTML = '';\n  for (const idFilm of dataWatchedCards) {\n    // if (isFilmDisplayed(idFilm)) {\n    //   continue;\n    // }\n    // addDisplayedFilm(idFilm);\n\n    const oneFilmCard = await getWatchedFilms(idFilm);\n    let release = Number.parseInt(\n      oneFilmCard.release_date || oneFilmCard.first_air_date\n    );\n    const mainPoster = `https://image.tmdb.org/t/p/w300${oneFilmCard.poster_path}`;\n    const posterFake = `https://shop-cdn1.vigbo.tech/shops/48947/products/18863233/images/2-be392e7cfe9a0fa843b29c1e22be8909.jpg`;\n    let genreMarkup = [];\n    genres.forEach(genre => {\n      if (oneFilmCard.genres.includes(genre.id)) {\n        genreMarkup.push(genre.name);\n      }\n    });\n    let markup = '';\n    markup += ` <li class =\"film-item\">\n                <a id='${oneFilmCard.id}' class=\"film-card\" href=\"#\">\n                  <div class='thumb'>\n                  <img\n                      class = 'poster'\n                      src= \"${\n                        oneFilmCard.poster_path ? mainPoster : posterFake\n                      }\"\n                      alt=\"${oneFilmCard.title}\"\n                      loading=\"lazy\"\n                    /></div>\n                    <div class='film-data'>\n                      <h2 class=\"title-film\">${oneFilmCard.title}</h2>\n                      <p>\n                         <span class='info-film'>${genreMarkup.join(\n                           ', '\n                         )} | ${release}</span>\n                        <span class =\"rating\">IMDB:<br>${oneFilmCard.vote_average.toFixed(\n                          1\n                        )}</span>\n                      </p>\n                    </div>\n                  </a>\n              </li>`;\n    console.log(markup);\n    console.log(oneFilmCard);\n    containerListWatchedCard.insertAdjacentHTML('beforeend', markup);\n  }\n}\nonCardWatch();\nasync function getWatchedFilms(page) {\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL}${page}?api_key=${API_KEY}&language=en-US`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}","const queueBtn= document.querySelector('.secondary')\nconst watchedBtn= document.querySelector('.lib-btn.current')\nconst btnClearAll = document.querySelector('.btn-clear-all')\n\nqueueBtn.addEventListener('click', onClickQueueBtn)\nexport function onClickQueueBtn(){\n  if(queueBtn.classList.contains('current')){return}\n  queueBtn.classList.toggle('current')\n  watchedBtn.classList.toggle('current')\n}\nwatchedBtn.addEventListener('click', onClickWatchedBtn)\nexport function onClickWatchedBtn(){\n  if(watchedBtn.classList.contains('current')){return}\n  queueBtn.classList.toggle('current')\n  watchedBtn.classList.toggle('current')\n}\n\nbtnClearAll.addEventListener('click', onClickClearAll)\nexport function onClickClearAll(){\n  if(watchedBtn.classList.contains('current')){\n    localStorage.removeItem('wathced')\n  return}\n  localStorage.removeItem('queue')\n}"],"names":["$2shzp","parcelRequire","$7744079a8aeaa033$var$queueBtn","document","querySelector","$7744079a8aeaa033$var$watchedBtn","$7744079a8aeaa033$var$btnClearAll","addEventListener","classList","contains","toggle","localStorage","removeItem","$085d2f9f3e302aeb$var$containerListWatchedCard","$085d2f9f3e302aeb$var$dataWatchedCards","JSON","parse","getItem","async","$085d2f9f3e302aeb$var$getWatchedFilms","page","data","default","get","error","console","log","innerHTML","idFilm","oneFilmCard","release","Number","parseInt","release_date","first_air_date","mainPoster","poster_path","posterFake","genreMarkup","$ezyJp","genres","forEach","genre","includes","id","push","name","markup","title","join","vote_average","toFixed","insertAdjacentHTML","$085d2f9f3e302aeb$var$onCardWatch"],"version":3,"file":"my-library.37737d2c.js.map"}