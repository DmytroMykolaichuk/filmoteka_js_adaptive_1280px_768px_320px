{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,0BCAMC,EAAUC,SAASC,cAAc,cACjCC,EAAYF,SAASC,cAAc,oBACnCE,EAAcH,SAASC,cAAc,kBAE3CF,EAASK,iBAAiB,SACnB,WACL,GAAGL,EAASM,UAAUC,SAAS,WAAY,OAC3CP,EAASM,UAAUE,OAAO,WAC1BL,EAAWG,UAAUE,OAAO,U,IAE9BL,EAAWE,iBAAiB,SACrB,WACL,GAAGF,EAAWG,UAAUC,SAAS,WAAY,OAC7CP,EAASM,UAAUE,OAAO,WAC1BL,EAAWG,UAAUE,OAAO,U,IAG9BJ,EAAYC,iBAAiB,SACtB,WACL,GAAGF,EAAWG,UAAUC,SAAS,WAEjC,YADEE,aAAaC,WAAW,WAE1BD,aAAaC,WAAW,Q,sDDd1B,IAAMC,EAA2BV,SAASC,cAAc,cAClDU,EAAmBC,KAAKC,MAAML,aAAaM,QAAQ,YACnDC,EAAW,sCACXC,EAAU,mC,SAUDC,I,OAAAA,EAAfC,EAAArB,EAAA,CAAAqB,EAAAC,GAAAC,MAAA,SAAAC,I,IAEOC,EAAAC,EAAAC,EAAAC,EAAAC,EAAMC,EAMHC,EACFC,EAGEC,EAEFC,EAMAC,E,kEAnBNtB,EAAyBuB,UAAY,GAChCX,GAAY,EAAZC,GAAY,EAAZC,OAAYU,E,SAAZT,EAAgBd,EAAgBwB,OAAAC,Y,UAAhCd,GAAAI,EAAAD,EAAYY,QAAAC,KAAA,C,uBAANX,EAAND,EAAYa,M,SAMWC,EAAgBb,G,OAApCC,EAAWa,EAAAC,KACbb,EAAUc,OAAOC,SACnBhB,EAAYiB,cAAgBjB,EAAYkB,gBAEpChB,EAAa,kCAA0DiB,OAAxBnB,EAAYoB,aAC7C,2GAChBjB,EAAc,GAClBkB,EAAAC,OAAOC,SAAQ,SAAAC,GACTxB,EAAYsB,OAAOG,SAASD,EAAME,KACpCvB,EAAYwB,KAAKH,EAAMI,K,IAGvBxB,EAAS,GACbA,GAAU,qDAMUe,OALCnB,EAAY0B,GAAG,2KAOXP,OAFLnB,EAAYoB,YAAclB,EAd1B,2GAeD,kCAKwBiB,OAJlBnB,EAAY6B,MAAM,uKAMIV,OAFJnB,EAAY6B,MAAM,uFAIjCV,OAFmBhB,EAAY2B,KACpC,MACA,OAC8BX,OADzBlB,EAAQ,oEAGdkB,OAF+BnB,EAAY+B,aAAaC,QACxD,GACA,gHAKtBC,QAAQC,IAAI9B,GACZ6B,QAAQC,IAAIlC,GACZlB,EAAyBqD,mBAAmB,YAAa/B,G,QA7CtDV,GAAY,E,yEAAZC,GAAY,EAAZC,EAAYiB,EAAAuB,G,4BAAZ1C,GAAY,MAAZG,EAAYwC,QAAZxC,EAAYwC,S,sBAAZ1C,EAAY,C,sBAAZC,E,qIAFmB0C,MAAAC,KAAAC,U,UAmDX5B,EAAgB6B,G,OAAhBC,EAAeJ,MAAAC,KAAAC,U,UAAfE,I,OAAAA,EAAfpD,EAAArB,EAAA,CAAAqB,EAAAC,GAAAC,MAAA,SAAAC,EAA+BgD,G,IAEnBE,E,2FAAeC,EAAAC,QAAMC,IAC3B,GAAc3B,OAAXhC,GAA2BgC,OAAhBsB,EAAK,aAAmBtB,OAAR/B,EAAQ,oB,cADlCuD,EAAM9B,EAAAC,KAAJ6B,K,kBAGDA,G,gCAEPV,QAAQC,IAAGrB,EAAAuB,I,0DAPeE,MAAAC,KAAAC,U,aAnDfnD,EAAWiD,MAAAC,KAAAC,U,CAkD1BO,E","sources":["src/js/my-library.js","src/js/buttons-my-library.js"],"sourcesContent":["import axios from 'axios';\nimport { onClickWatchedBtn, onClickQueueBtn, onClickClearAll } from \"./buttons-my-library\";\nimport { genres } from './genres';\nimport { clickOnFilmCard } from './film-modal';\nimport { getVideoInfo } from './trailer';\nimport { showPreloader, hidePreloader } from './loader';\n// import { showPreloader, hidePreloader } from './loader';\n// https://api.themoviedb.org/3/movie/{movie_id}?api_key=<<api_key>>&language=en-US\nconst containerListWatchedCard = document.querySelector('.film-list');\nconst dataWatchedCards = JSON.parse(localStorage.getItem('wathced'));\nconst BASE_URL = 'https://api.themoviedb.org/3/movie/';\nconst API_KEY = '352708f90836dd2b75b209ae082e91df';\n// const displayedFilms = [];\n\n// function isFilmDisplayed(id) {\n//   return displayedFilms.includes(id);\n// }\n\n// function addDisplayedFilm(id) {\n//   displayedFilms.push(id);\n// }\nasync function onCardWatch() {\n  containerListWatchedCard.innerHTML = '';\n  for (const idFilm of dataWatchedCards) {\n    // if (isFilmDisplayed(idFilm)) {\n    //   continue;\n    // }\n    // addDisplayedFilm(idFilm);\n\n    const oneFilmCard = await getWatchedFilms(idFilm);\n    let release = Number.parseInt(\n      oneFilmCard.release_date || oneFilmCard.first_air_date\n    );\n    const mainPoster = `https://image.tmdb.org/t/p/w300${oneFilmCard.poster_path}`;\n    const posterFake = `https://shop-cdn1.vigbo.tech/shops/48947/products/18863233/images/2-be392e7cfe9a0fa843b29c1e22be8909.jpg`;\n    let genreMarkup = [];\n    genres.forEach(genre => {\n      if (oneFilmCard.genres.includes(genre.id)) {\n        genreMarkup.push(genre.name);\n      }\n    });\n    let markup = '';\n    markup += ` <li class =\"film-item\">\n                <a id='${oneFilmCard.id}' class=\"film-card\" href=\"#\">\n                  <div class='thumb'>\n                  <img\n                      class = 'poster'\n                      src= \"${\n                        oneFilmCard.poster_path ? mainPoster : posterFake\n                      }\"\n                      alt=\"${oneFilmCard.title}\"\n                      loading=\"lazy\"\n                    /></div>\n                    <div class='film-data'>\n                      <h2 class=\"title-film\">${oneFilmCard.title}</h2>\n                      <p>\n                         <span class='info-film'>${genreMarkup.join(\n                           ', '\n                         )} | ${release}</span>\n                        <span class =\"rating\">IMDB:<br>${oneFilmCard.vote_average.toFixed(\n                          1\n                        )}</span>\n                      </p>\n                    </div>\n                  </a>\n              </li>`;\n    console.log(markup);\n    console.log(oneFilmCard);\n    containerListWatchedCard.insertAdjacentHTML('beforeend', markup);\n  }\n}\nonCardWatch();\nasync function getWatchedFilms(page) {\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL}${page}?api_key=${API_KEY}&language=en-US`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}","const queueBtn= document.querySelector('.secondary')\nconst watchedBtn= document.querySelector('.lib-btn.current')\nconst btnClearAll = document.querySelector('.btn-clear-all')\n\nqueueBtn.addEventListener('click', onClickQueueBtn)\nexport function onClickQueueBtn(){\n  if(queueBtn.classList.contains('current')){return}\n  queueBtn.classList.toggle('current')\n  watchedBtn.classList.toggle('current')\n}\nwatchedBtn.addEventListener('click', onClickWatchedBtn)\nexport function onClickWatchedBtn(){\n  if(watchedBtn.classList.contains('current')){return}\n  queueBtn.classList.toggle('current')\n  watchedBtn.classList.toggle('current')\n}\n\nbtnClearAll.addEventListener('click', onClickClearAll)\nexport function onClickClearAll(){\n  if(watchedBtn.classList.contains('current')){\n    localStorage.removeItem('wathced')\n  return}\n  localStorage.removeItem('queue')\n}"],"names":["$bpxeT","parcelRequire","$7d854cd8b40ceb9e$var$queueBtn","document","querySelector","$7d854cd8b40ceb9e$var$watchedBtn","$7d854cd8b40ceb9e$var$btnClearAll","addEventListener","classList","contains","toggle","localStorage","removeItem","$bb2af86579234925$var$containerListWatchedCard","$bb2af86579234925$var$dataWatchedCards","JSON","parse","getItem","$bb2af86579234925$var$BASE_URL","$bb2af86579234925$var$API_KEY","$bb2af86579234925$var$_onCardWatch","$parcel$interopDefault","$2TvXO","mark","_callee","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","idFilm","oneFilmCard","release","mainPoster","genreMarkup","markup","innerHTML","undefined","Symbol","iterator","next","done","value","$bb2af86579234925$var$getWatchedFilms","_ctx","sent","Number","parseInt","release_date","first_air_date","concat","poster_path","$twtVq","genres","forEach","genre","includes","id","push","name","title","join","vote_average","toFixed","console","log","insertAdjacentHTML","t0","return","apply","this","arguments","page","$bb2af86579234925$var$_getWatchedFilms","data","$dIxxU","default","get","$bb2af86579234925$var$onCardWatch"],"version":3,"file":"my-library.907ff54f.js.map"}